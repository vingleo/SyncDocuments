学习曲线    (参考  wix.com  样式) 

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXX  PART 0 参考网站              XXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1.选色参考网站   
1.1 http://paletton.com/#uid=1000u0kq1o2g-v-lrrkt3jG-rex 
1.2 https://color.adobe.com/create/color-wheel/?base=2&rule=Analogous&selected=0&name=My%20Color%20Theme&mode=rgb&rgbvalues=1,0.42626123425793594,0,0.91,0.22975141850769798,0.04550000000000004,1,0,0,0.91,0.04550000000000004,0.6772191491703454,0.7608761448507153,0.050000000000000044,1&swatchOrder=0,1,2,3,4
1.3 http://www.peise.net
1.4 日本颜色  https://www.colordic.org/w/
1.5 中国颜色  httPs://www.zhongguose.com

https://waitbutwhy.com    参考别人网站的制作方法

www.supremo.tv/typeterms  一个书写英文的指导网站

css-tricks.com  所有css 属性列表

paletton.com   采集颜色的网站

https://unsplash.com/t/animals   免费图片的网站

caniuse.com     查看CSS 属性在各个浏览器的兼容性

设计模式 学习网站
https://www.runoob.com/design-pattern/factory-pattern.html

Git 学习网站
https://www.runoob.com/git/git-branch.html


响应式 Web 设计 - 网格视图
https://www.runoob.com/css/css-rwd-grid.html

CSS 学习网站
https://www.runoob.com/css/css-border.html


MDN web docs
https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement


检查标签是否可用 https://caniuse.com/#search=queryselectorAll
https://waitbutwhy.com    参考别人网站的制作方法

www.supremo.tv/typeterms  一个书写英文的指导网站

css-tricks.com  所有css 属性列表

paletton.com   采集颜色的网站  说明网站 https://www.uisdc.com/color-matching-paletton

https://unsplash.com/t/animals   免费图片的网站

caniuse.com     查看CSS 属性在各个浏览器的兼容性

node.js  官网  https://nodejs.org/en/
使用node 创建 create-react-app 创建时报错，注意要选用淘宝的镜像  npm config set registry https://registry.npm.taobao.org
再删除C:\Users\当前计算机用户名字\AppData\Roaming\npm-cache\ 该文件夹下所有内容

Solidify
● Go deeper with css and js
● Flexbox, Grid, simple animations
● Simple js components, tooltip, todolist,sliding siderbar nav
● Learn about the basics of css design patterns (bern,oocss,smacss)
● Learn about the basics of js design paterns(sinleton, module, revealing module etc)

data structures & algorithms **important **

最后
● Learn React
● React-router
● Todo list, count down timer, rps game, simple multipage site
● After 3-5 projects, learn redux, build more stuff with react-redux

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXX  PART I   HTML           XXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

1. 表单
<input type="text">
<input type="password">
<input type="radio">   // 取值要用checked 属性
<input type="checkbox">  // 取值要用checked 属性
<input type="hidden">
<select>

获取值和设置
var input = document.getElementById('email');
console.log(input.value);

2. 超链接
使用href 属性 
可以在网页任何地方加入锚点
例如：
<a name="151 dates 日期">
<h3>151 dates 日期 >/h3>
</a>
然后可在超链接中引用，注意#符号，伪类
<li><a href="#chap151">151 dates 日期 ></a></li>
建议超链接只对文字部分添加，不然会整行都带有超链接

3. 表格 （参考页面https://www.w3school.com.cn/html/html_tables.asp）
3.1 用<table>标签定义
3.2 行用<tr>
3.3 单元格用<td>定义，代表 table data
3.4 单元格可包含文本、图片、列表、段落、表单、水平线及表格
3.5 不定义border边框属性，表格将不显示边框
<table border="1">
3.6 表头用<th>，也要跟在<tr>属性后面，自带黑体效果
3.7 空单元格可用&nbsp; 空占位符填充， 避免边框不显示
3.8 可在<table>属性之后添加表格标题
<caption>我的标题</caption>
3.9 横跨两列的单元格
<th colspan="2">电话</th>
横跨两行的单元格
<th rowspan="2">电话</th>
3.10 对齐单元格内文字
<th align="left">项目</th>


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXX  PART II   CSS           XXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
结构为4部分
1. selector
2. declaration 大括号内包含 {}
3. property 用分号分隔不同属性 ;
4. value   属性和值之间用冒号:

1. selector
1.1 element selector
1.2 class selectors
1.3 ID selectors 每页只有一个，在css文件中引用时用分号 #加名字
1.4 element-specific selectors
例子：
h2.subheading {color:blue;}
div#sidebar {font-size:80%;}

CLASS 和 ID 命名惯例
不用白空格和特殊字符
大小写敏感






<a>   //链接伪类
例子：
a:link {
	color: cadetblue;
	text-decoration-line: none; // 默认链接不加下划线

}

a:visited {
	color: black //访问后的连接为黑色
}

a:hover {
	color: dodgerblue;
	text-decoration: underline;
}





<link>   //css文件链接

<div>  和 <span>的区别用法
块结构 和  行内块

********************
*****[边框]相关
border  

border:2px solid black;
	粗细 形状 颜色
********************


********************
*****[图片]相关
<img>  标签带有的属性有
src="img/otter2.jpg"
alt="Robin the otter"


1.图片的CSS 和  CSS3中的媒体查询


div.img{
	border: 1px solid #ccc;
}

div.img:hover {
	border: 1px solid #777;
}

div.img img {
	width:100%;
	height:auto;
}

div.desc {
	padding: 15px;
	text-align:center;
}

* {
	box-sizing:border-box;
}

.responsive {
	padding:0 6px;
	float:left;
	width: 24.99999%；
}

@media only screen and (max-width: 700px) {
	.responsive {
		width: 49.99999%;
		margin: 6px 0;
	}
}

@media only screen and (max-width: 500px) {
	.responsive {
		width: 49.99999%;
		margin: 6px 0;
	}
}

.clearfix:after {
	content:"";
	display: table;
	clear:both;
}


2.图片的透明度属性
opacity 属性通常和hover选择器一起使用， 鼠标移动到图片上改变图片从半透明改为不透明 值从0.0 - 1.0 越小越透明
<style>
img
{
	opacity:0.4;
	filter:alpha(opacity=40); //词条支持IE8及之前版本， 数字越小越透明
}


img:hover
{
	opacity:1.0;
	filter:alpha(opacity=100);
}


</style>


3. 对于显示多个图片需要较长的加载时间和生成多个服务器请求。使用拼接可以降低请求数量，节约带宽。
3.1 使用一个图片代替三个独立的图像
<sytle>
img.home {
	width:46px;
	height:44px;
	background:url(/images/image.gif)0 0;
}

img.next {
	width:43px;
	height:44px;
	background:url(/images/image.gif) - 91px 0;
}

</style>

<body>
<img class="home" src="/images/image.gif">   //src不能为空，所以只定义一个小的透明图像。具体图像是CSS中=指定的图像
<img class="next" src="/images/image.gif">
</body>


3.2 切割图像作为 导航按钮，并且有悬浮效果--注意切割方式
<style>
#navlist{
	position:relative;
}
#navlist li{
	margin:0;
	padding:0;
	list-style:none;
	position:absolute;
	top:0;}
#navlist li, #navlist a{
	height:44px;
	display:block;
}

#home{
	left:0px;
	width:46px;
}
#home{
	background:url('img_navsprites_hover.gif') 0 0;
}
#home a:hover{
	background: url('img_navsprites_hover.gif') 0 -45px;}

#prev{
	left:63px;
	width:43px;
}
#prev{
	background:url('img_navsprites_hover.gif') -47px 0;
}
#prev a:hover{
	background: url('img_navsprites_hover.gif') -47px -45px;
}

#next{
	left:129px;
	width:43px;
}
#next{
	background:url('img_navsprites_hover.gif') -91px 0;
}
#next a:hover{
	background: url('img_navsprites_hover.gif') -91px -45px;
}
</style>




<body>
<ul id="navlist">
  <li id="home"><a href="default.asp"></a></li>
  <li id="prev"><a href="css_intro.asp"></a></li>
  <li id="next"><a href="css_syntax.asp"></a></li>
</ul>

</body>

4. 关于空格和回车行
4.1 空格 
&nbsp;
4.1.1 使用<pre>
<pre>
    这是预格式文本，它保留了     空格
    和空行。
	
</pre>
4.1.2 用全角空格，全角空格被解释为汉字，所以不会被被解释为HTML分隔符，可以按照实际的空格数显示。
4.1.3 用word-spacing 属性。
4.1.4 用white-space 属性，这个属性声明如何处理元素内的空白符。

4.2 回车
用换行标签<br/>代替空行。

5. 关于输入汉语拼音和英文音标
5.1 拼音
<ruby>拼音<rt>pinyin</rt></ruby> //输入带音标的拼音用搜狗输入法的软键盘
5.2 英文音标
使用https://www.xuebuyuan.com/704521.html 和 http://www.fmddlmyy.cn/yinbiao/ 进行输入并复制


********************
*****[选择器]相关
有多种选择方式
class  、 id 、Tag元素标签选择器 和 标签内    属性选择器  包含选择器 子选择器 兄弟选择器 
优先级别
标签内 > id > class > Tag选择器 

getElementById('myID');    // 不用加#

包含选择器 可以 标签包含和 类包含
例：
.A B{...}   //类名为A内标签为B的所有元素  或者是所有父标签为A的B标签
要选中某一个特定元素需要用数组表示法
例：
var x = document.querySelectorAll('.c-red.c-green p')[1];   //网页中 的类为  <div class="c-red c-green"> 注意一定要用两个.  只用一个. 结果会是undefined

.A>B{...} //这种形式是Class A内标签为B的所有直系子代， 隔代的 不选择


通用选择器
*{属性：值}

相邻选择器
例：div+p {
	color:red;     //代表紧邻div元素后的第一个p元素
}


可以定义属性和值，便于CSS选择

~= 和 |=


区别  ~= 含空格

|= 含中杠


最重要的CSS3 模块
・选择器
・盒模型
・背景和边框
・文字特效
・2D/3D转换
・动画
・多列布局
・用户界面

********************
*****CSS3字体相关
5.1 @font-face
字体文件包含在网站中，自动下载到用户
IE9+、Firefox、Chrome、Safari、Opera 支持WOFF（Web Open Font Format）
Firefox 、 Chrome、Safari、Opera 支持ttf（True Type字体）otf(OpenType)
Chrome、Safari、Opera 支持 SVG字体折叠
IE 支持EOT(Embedded Open Type)

1. 首先定义字体的名称(myFirstFont) 并指向文件
url用小写字母
对元素使用字体， 通过font-family属性引用字体名称（myFirstFont）
********************
********************
*****
6. Flexbox相关   [和   CSS Grid 的区别 : flexbox 为1维 水平方向布局； Grid为 二维]
要表现 需要 在html中 有 flex-container 容器 +  flex-item 项目成员

可以在html中  使用div 定制并制定 class 来设定 划分板块内容
<div class="flex-container">
    <div class="flex-item">flex item1 </div>
	<div class="flex-item">flex item2 </div>
	<div class="flex-item">flex item3 </div>
</div>

然后在CSS中 
6.1 制定容器 flex-container 的display 属性为flex   以及  flex-direction属性，这是制定子元素在父容器中的位置 设定子元素排列方向顺序 如横向排列左到右用row ，右到左row-reverse。  纵向 上到下 column  下到上 column-reverse          注意要兼容性需要加不同的版本
.flex-container {
	display: -webkit-flex;
	display: flex;
	-web-kit-flex-direction：row-reverse；
	flex-direction：row-reverse；

}

6.2 单单direction 属性可设置为 rtl(right-to-left) 或 ltr(left-to-right)

注意：flex-flow 属性是 flex-direction 和 flex-wrap的简写
属性值 第一个为 direction值  第二个为 折行的值




flex-item的属性可设置 背景色、宽高度 和 margin

6.3 justify-content 这个内容对齐属性作用在容器上。 把项目按照容器的主轴 main axis 对齐。
属性值有 flex-start  | flex-end | center | space-between | space-around

aign-items 设置  flex-item 在交叉轴cross axis 对齐方式



属性：  flex-basis  是控制主轴上的长度， 若主轴是横向的（flex-direction:row）， 该属性大小是宽度，主轴是纵向(flex-direction:column)，该属性大小是长度
要注意在横向主轴row下flex-basis属性和width等价，可调节的是height ， 而纵向主轴column下flex-basis属性和height等价，可调节的是 width

属性 flex 为 flex-grow，flex-shrink，flex-basis的结合体
默认值为 o 1 auto;

********************
*****<script>标签相关
<script>标签放在</body>之上

********************
*****关于CSS中 文字位置的说明
.detail-image-title {
	position: absolute;   
	bottom: -0.3em;   左下角往上是正值， 往下是负值
	left: 0.4em;      左下角往右是正值，往左是负值
	font-family: airstreamregular;
	color: white;
	text-shadow: rgba(0, 0, 0, 0.9) 1px 2px 9px;
	font-size: 4em;
}


*******************
*****用JS来查找具体属性作为变量名需要用 '[]' 来引用
例：

HTML中
<span class="detail-image-title" data-image-role="title">Stayin' Alive</span>

JS中
var DETAIL_IMAGE_SELECTOR= '[data-image-role="target"]';

*******************
*****用JS操作DOM
●更新
●遍历
●添加
●删除
获取DOM节点
document.getElementById()
document.getElementsByTagName()  
document.getElementsByClassName()  // 用这个方法返回的是数组，需要用索引号选中元素
遇到有多个Class名可以用数组表示第几个父节点[0]

var trs = document.getElementById("myTable").getElementsByTagName("tr"); //先定位ID为'myTable'的节点，再返回其内部所有tr节点 

var reds = document.getElementById("test-div").getElementsByClassName("red"); // 先定位ID为'test-div'的节点，再返回其内部所有class包含red的节点


var cs = test.children;    //获取节点test下的所有直属子节点

var first = test.firstElementChild;
var last = test.lastElementchild;  


也可以使用querySelector() querySelectorAll() 获取节点
var query = document.querySelector('#q1');  // 获取ID为 q1节点

var queryall = q1.querySelectorAll('div.highlighted >p'); 获取q1节点内的符合条件的所有节点


var query = document.querySelectorAll('.c-red.c-green p');  //表示 选c-red c-green class下的 所有p 节点

var query = document.querySelector('.c-green:last-child p:last-child'); //表示 c-green class下的最后一个子节点，然后 其中P 标签的最后一个子节点

var query = document.getElementById("test-div").lastElementChild.lastElementChild;  //表示选 test-div ID下最后子节点下的最后子节点

●更新DOM
方法 1――修改innerHTML属性（可修改节点文本和内部子树，会替换其中所有的子节点）
// 获取<p id="p-id">...</p>
var p = document.getElementById("p-id");

//设置文本为abc
p.innerHTML = 'abc'; //结果为<p id="p-id">abc</p>

//设置HTML
p.innerHTML = 'ABC <span style="color:red">RED</span>XYZ';  //修改了内部结构 <p>...</p>


方法 2――修改innerText 或 textContent (确保无法设置任何HTML标签)
区别 innnerText 读取属性 不返回隐藏元素的文本
     textContent 返回所有文本

//获取<p id="p-id">...</p>
var p = document.getElementById("p-id");

//设置文本
p.innerText = '<script>alert("Hi")</script>';  //产生的结果无法设置<script>节点，HTML会被自动编码   //<p id="p-id">&lt;script&gt;alert("Hi")&lt;/script&gt;</p>

关于修改CSS   直接获取和修改 style 属性

var p = document.getElementById("p-id");
//设置CSS
p.style.color = '#ff0000';
p.style.fontSize = '20px';
p.style.paddingTop = '2em';
p.style.fontWeight = 'bold'; //！！！注意CSS的font-weight 需要改为 fontWeight 写法


●插入DOM
如果DOM节点为空<div></div> 直接使用innerHTML = '<span>Child</span>'
方法1 appendChild 插入到最后一个子节点
var js = document.getElementById('js'),      //这个是在html页面中已经存在的标签
    list = document.getElementById('list');   //list是父节点
list.appendChild(js);                        //加在最后一个子节点

方法2 创建一个新节点
var list = document.getElementById('list), 
	haskell = document.createElement('p');
	haskell.id = 'haskell';
	haskell.style.color = "red";
	haskell.innerText = 'This is Haskell line';
	lsit.appendChild(haskell);

动态创建方法
var d = document.createElement('style');
d.setAttribute('type','text/css');   //两个参数，属性名+ 属性值
d.innerHTML = 'p {color:red}';   //增加带属性的标签
document.getElementByTagName('head')[0].appendChild(d);  //找到第一个标签名下的元素。增加子节点

第三种方法 插入到指定位置
var list = document.getElementById('list'), //找到父元素
    ref = document.getElementById('python'), //定位到需要插入的元素前面
	haskell = document.createElement('p'); //创建要加入的元素
	haskell.id = 'haskell';               //加入元素的id属性
	haskell.innerText = 'This is Haskell line';   //加入元素的文字
	list.insertBefore(haskell,ref);   // 执行插入
	
●删除DOM
要点为获得该节点本身和父节点，调用父节点的removeChild删除自己
var self = document.getElementById('to-be-removed');
var parent = self.parentElement;
var removed = parent.removeChild(self);
removed === self;  //虽然DOM树已经删除，内存中还在
注意children 属性为只读，子节点有变化时实时更新

	 
******************************************************************************************************************
[带有项目和描述的描述列表description list] <dl> 标签与 <dt> （定义项目/名字）和 <dd> （描述每一个项目/名字）一起使用。
<dl class="custom">
			<dt onClick="changeImage()">客户管理<img src="images/left/select_xl01.png"></dt>
			<dd class="first_dd"><a href="#">客户管理</a></dd>
			<dd><a href="#">试用/成交客户管理</a></dd>
			<dd><a href="#">未成交客户管理</a></dd>
			<dd><a href="#">即将到期客户管理</a></dd>
</dl>	
	
	
******************************************************************************************************************
** 背景用色参考网站 https://colorhunt.co/palettes/trendy   || http://paletton.com/#uid=33e0u0ko+r8flAnkotJs6mhvQht 更好用
** 青灰色背景色 #b0c4de
**  8个参考背景色 background 属性
**
3AE273	淡绿色

EBCA14	浅黄色

D73C3C

449FD5

27CD9B

DA7525

944AB1

3493BD

**  6个参考背景色 background 属性
ACF4B6
FFE975
5EFFFA
E5B3FC
83EDBF
D6824E

** 4个参考背景色 background 属性
2076E1	//蓝
FFDB00	//黄
C93D3D  //红
5BBB5D  //绿
搭配border 3px solid black

** 作为box元素的背景
#B6D6DB 蓝色
#C3EDB5 绿色
#C5B0D6 紫色

**********************
可乐配色
#NCR25




******************************
字体颜色  color 属性 
white

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXX  PART III  JavaScript    XXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1. DOM 相关 （Document Object Model）
了解知识点：
1.1 DOM树状结构
顶层 Document

根元素 Root element: <html>

一次层元素
<head>   <body>

第二层元素
<title>      和      <a>     <h1> 等  
元素的属性
Attribute:"href"
Text:"My link"
Text:"My header"

操作节点包括
更新 修改该节点HTML内容
遍历 遍历该节点下子节点
添加 增加一个子节点
删除 删除节点及子节点内容

选择DOM节点可用
document.getElementById()
document.getElementsByTagName()
document.getElementsByClassName()
可先定位父节点后选择子节点

var trs = document.getElementById('test-table').getElementsByTagName('tr');
var reds = document.getElementById('test-div').getElementsByClassName('red');

选择特定节点所有子节点
var cs = test.children;
选第一、最后的子节点
var first = test.firstElementChild;
var last = test.lastElementChild;

使用querySelector()
querySelectorAll();

！！！！注意用querySelector() 此类方法 class必须用 .   ID必须用 # 引用

var q1 = document.querySelector('#q1');
var xx = document.querySelectorAll('.c-green')[1].lastElementChild;    //注意用Class的时候，返回一个数组，需要定位到子节点。
var ps = q1.querySelector('div.highlighted > p')




2. JavaScript可以修改 页面中HTML元素、HTML属性、CSS样式，对事件Event做响应

3. 查找元素
3.1通过id（找一个）
查找 id="intro" 元素
var x=document.getElementById("intro");
找不到x 包含 null

3.2通过标签名(可以找一组)
查找id=“main“ 元素所有 <p> 元素
var y = x.getEelemntsByTagName("p")

有个特别属性可以从查询到的结果反查标签名
.tagName


3.3通过类名
getElementsByClassName("intro");


4.修改文档
4.1 修改文档HTML元素
var element=document.getElementById("header");
element.innerHTML="新内容";

4.2 修改HTML属性
document.getElementById(id).属性名="新属性值"

4.3 修改CSS样式
document.getElementById(id).style.property="新样式"

例：
document.getElementById("p1").style.color="blue";
document.getElementById("p2").style.fontSize="large";

4.4 触发事件
元素被点击、页面加载完成、输入框被修改、图像已加载、鼠标移动到元素上、触发按键等
例1：
<button type="button" onClick="document.getElementById('id1').style.color='red'">Click me!</button>
例2：
<button type="button" onClick="document.getElementById('id2').style.visibility='hidden'">点我消失</button>
<button type="button" onClick="document.getElementById('id2').style.visibility='visible'">点我显示</button>
例3：
<h1 onclick="this.innerHTML='Ooops!'">点击改变文本</h1>


触发可通过添加事件监听器 addEventListener()方法
document.getElementById("myBtn").addEventListener("click",displayDate);
通过ID获取元素， 添加事件监听者，参数是一个是事件类型，一个是响应的函数，最后参数为布尔类型，冒泡还是捕获；
元素可以有多个事件句柄，可以添加同类型句柄(如click)
可以对所有DOM对象，不仅是HTML元素，如window对象
通过removeEventListener()方法移除事件监听
好处是分离HTML标记，可读性强，在没有控制HTML标签时也可以添加事件监听


5. <script> </script> 要写在 </body> 后，确保页面载入完成后执行脚本

6. 浏览器对象
6.1 window对象
浏览器窗口对象
主要属性有：
内部大小（不含菜单、工具、边框,含滚动条）
window.innerWidth window.innerHeight
外部大小
window.outerWidth window.outerHeight

6.2 Navigator对象
主要属性有：
navigator.appName 浏览器名称
navigator.appVersion 
navigator.language
navigator.platform
navigator.userAgent 网页中设置的userAgent

6.3 screen 屏幕信息
主要属性有：
screen.width
screen.height 像素单位
screen.colorDepth 

6.4 location
获取URL信息
location.href    //http://www.examle.com:8080/path/index.html?a=1&b=2#TOP
location.protocol
location.host
location.port
location.pathname
location.search // '?a=1&b=2'
location.hash  // 'TOP'
location.assign('www.baidu.com')
location.reload()

6.5 document 文档对象
能实现功能参照3.1
另外cookie 属性
服务器发送到浏览器的key-value配对，区分用户、存储网站设置、界面语言等

6.6 history对象――不应该使用该对象
有back(),  forward() 方法， 由于AJAX交互，调用会效果非常差



7. 短路运算符 && ||
7.1 逻辑与 &&
左边为true， 返回右边值
var a = 5 && 6;
console.log(a);  // 6

左边为false，返回左边值， 左边为null/NaN/undefined 返回对应值
var a = false && 6;
console.log(a); // false


7.2 逻辑或
左边布尔为false， 返回右边值
var a = false || 6;
console.log(a); // 6

左边布尔计算为true，返回左边值
var a = true || 6;
console.log(a); // true
两个操作数都是null NaN/undefined 返回对应值



8. 循环算法精选
8.1 以下代码实现效果：将 test-list 节点下的所有子节点按照字母顺序进行排序，子标签不同亦可

let list = document.getElementById('test-list');
let childrenArr = Array.from(list.children);
childrenArr.sort((a,b)=>a.innerText.localeCompare(b.innerText));
childrenArr.forEach(i=>list.appendChild(i));

8.2 以下代码实现效果：将test-list 节点下删除第二（swift）、四（ANSI C）、六个子节点(DirectX)
第一种：最短，不用强制编码innerText
var list = document.getElementById('test-list').children;
for(i=1; i<list.length; i++){
    list[i].remove();
}

第二种
var
    parent=document.getElementById('test-list');
    list=parent.getElementsByTagName('li');
for(let item of list){
    if(item.innerText==='Swift'||item.innerText==='ANSI C'||item.innerText==='DirectX'){
        parent.removeChild(item);
    }
}

另一种使用否条件的变种
var
    parent=document.getElementById('test-list');
    list=parent.getElementsByTagName('li');
for(let item of list){
    if(item.innerText==='Swift'||item.innerText==='ANSI C'||item.innerText==='DirectX'){
        parent.removeChild(item);
    }
}
